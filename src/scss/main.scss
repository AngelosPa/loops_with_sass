// //thats for bootstrap i keep it here  @import "../../node_modules/bootstrap/scss/bootstrap.scss";

$stars-count: 36; // corresponds to the number of divs in your HTML

// Define animation
@keyframes move {
  0% {
    transform: rotate(00deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

// Mixin to use animation
@mixin add-move-animation($duration) {
  animation-name: move;
  animation-duration: $duration;
  animation-iteration-count: infinite;
  animation-direction: normal;
  animation-timing-function: linear;
}

// Mixin to make the stars
@mixin sterne {
  background: white;
  border-radius: 100%;

  //   clip-path: polygon(
  //     49% 0%,
  //     58% 43%,
  //     100% 35%,
  //     63% 52%,
  //     80% 90%,
  //     52% 57%,
  //     20% 90%,
  //     43% 53%,
  //     0% 35%,
  //     47% 41%
  //   );
  box-shadow: 1rem 1rem 1rem 1rem blue;
}

body {
  background-color: black;
  height: 100vh;
  width: 100vw;
  display: flex;
  justify-content: center;
  align-items: center;
  @include add-move-animation(11 + 3s);
}

@for $i from 1 through 5 {
  .star:nth-child(#{$i}) {
    @include add-move-animation(6s);
    @include sterne();

    width: 1.5rem;
    height: 1.5rem;
    position: absolute;
    left: 5 + $i * $i + rem;
    top: 1 + $i * 4 + rem;
  }
}
@for $i from 5 through 10 {
  .star:nth-child(#{$i}) {
    @include add-move-animation(6s);
    @include sterne();
    width: 1.9rem;
    height: 1.8rem;
    position: absolute;
    left: 14 + ($i * $i)/2 + rem;
    top: 14 + $i + rem;
  }
}
@for $i from 10 through 18 {
  .star:nth-child(#{$i}) {
    @include add-move-animation(6s);
    @include sterne();
    width: 1.2rem;
    height: 1.2rem;
    position: absolute;
    left: -17 + ($i * $i)/5 + rem;
    top: -32 + $i * 4 + rem;
  }
}

// random() will return a number between 1-100 with no argument being passed to it, or when you pass in a single integer parameter to define the upper limit. random(20) will return a number between 1-20.

.stars-container {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 100%;
  height: 3rem;
  width: 3rem;
  position: relative;
  background: linear-gradient(
    to left,
    rgba(255, 255, 255, 0.8),
    #003366,
    #000d1a,
    #000d1a,
    #000d1a,
    #000000c2
  );
  @include add-move-animation(6s);
}
.stars-container2 {
  display: flex;
  border-radius: 100%;
  justify-content: center;
  align-items: center;
  height: 1rem;
  width: 1rem;
  margin-left: 3rem;
  position: relative;
  background: linear-gradient(#806b0e, #f3f3e3);
  box-shadow: 0px 0px 15px 1px rgba(243, 245, 148, 0.637);
  @include add-move-animation(6+3s);
}
// // For loop to randomize values for each div bar
// @for $i from 1 through $stars-count {
//   .star:nth-child(#{$i}) {
//     background: linear-gradient(
//       to bottom right,
//       lighten(orange, random(40)),
//       rgba(darken(orange, random(10)), 1)
//     );
//     // random() will return a number between 1-100 with no argument being passed to it, or when you pass in a single integer parameter to define the upper limit. random(20) will return a number between 1-20.
//     height: random(60) + 10 + vh;
//     border-radius: 0 0 ((random(50) + 10 + px)) ((random(50) + 10 + px));
//     transform-origin: 0 0;

//     @if (($i % 2) != 0) {
//       border-radius: ((random(50) + 10 + px)) ((random(20) + 10 + px)) 0 0;
//       background: linear-gradient(
//         to top right,
//         lighten(gray, random(40)),
//         rgba(darken(gray, random(10)), 1)
//       );
//     }
//     // The lighten() function increases lightness by a fixed amount.
//     // The darken() function decreases lightness by a fixed amount.
//     @include add-move-animation(random(5) + 1 + s);
//   }
// }

// .star:nth-child(odd) {
//   align-self: end;
//   transform-origin: 0 100%;
// }
